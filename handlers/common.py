# handlers/common.py

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, BotCommand, CallbackQuery
from aiogram.fsm.context import FSMContext
import aiosqlite

from handlers.profile_form import ProfileForm
from keyboards.inline import get_edit_profile_keyboard

common_router = Router()


async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üèÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="create_profile", description="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="edit_profile", description="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="my_profile", description="üë§ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="all_profiles", description="üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–Ω–∫–µ—Ç–∏"),
        BotCommand(command="check_profile", description="üëÄ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É (reply –∞–±–æ @username)"),  # –û–Ω–æ–≤–∏–ª–∏ –æ–ø–∏—Å
        BotCommand(command="delete_profile", description="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É")
    ]
    await bot.set_my_commands(commands)


@common_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∫–µ—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /create_profile, —â–æ–± –ø–æ—á–∞—Ç–∏.")


@common_router.message(Command("my_profile"))
async def show_my_profile(message: Message, db: aiosqlite.Connection, bot: Bot):
    user_id = message.from_user.id
    async with db.execute("SELECT name, age, bio, photo_id FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        profile_data = await cursor.fetchone()
    if profile_data:
        name, age, bio, photo_id = profile_data
        caption = f"<b>–Ü–º'—è:</b> {name}\n<b>–í—ñ–∫:</b> {age}\n<b>–ü—Ä–æ —Å–µ–±–µ:</b> {bio}"
        await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=caption, parse_mode="HTML")
    else:
        await message.reply("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏. –°—Ç–≤–æ—Ä–∏ —ó—ó –∫–æ–º–∞–Ω–¥–æ—é /create_profile (—É –≥—Ä—É–ø—ñ).")


@common_router.message(Command("all_profiles"))
async def show_all_profiles(message: Message, db: aiosqlite.Connection):
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ.")
        return
    async with db.execute("SELECT username, name FROM profiles ORDER BY name") as cursor:
        all_profiles = await cursor.fetchall()
    if not all_profiles:
        await message.reply("–ù–∞ –∂–∞–ª—å, —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É.")
        return
    response_text = "üìã <b>–°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∞–Ω–∫–µ—Ç:</b>\n\n"
    for i, (username, name) in enumerate(all_profiles, 1):
        user_handle = f"@{username}" if username else name
        response_text += f"{i}. {user_handle}\n"
    await message.reply(response_text, parse_mode="HTML")


@common_router.message(Command("edit_profile"))
async def edit_profile(message: Message, db: aiosqlite.Connection, bot: Bot):
    user_id = message.from_user.id
    async with db.execute("SELECT name, age, bio, photo_id FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        profile_data = await cursor.fetchone()
    if profile_data:
        name, age, bio, photo_id = profile_data
        caption = f"–û—Å—å —Ç–≤–æ—è –ø–æ—Ç–æ—á–Ω–∞ –∞–Ω–∫–µ—Ç–∞. –©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?"
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo_id,
            caption=caption,
            reply_markup=get_edit_profile_keyboard()
        )
    else:
        await message.reply("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏, —â–æ–± —ó—ó —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ —ó—ó –∫–æ–º–∞–Ω–¥–æ—é /create_profile.")


@common_router.callback_query(F.data.startswith("edit_"))
async def handle_edit_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data.split("_")[1]
    actions = {
        "name": (ProfileForm.editing_name, "–í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º'—è:"),
        "age": (ProfileForm.editing_age, "–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –≤—ñ–∫:"),
        "bio": (ProfileForm.editing_bio, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É –±—ñ–æ–≥—Ä–∞—Ñ—ñ—é:"),
        "photo": (ProfileForm.editing_photo, "–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ:")
    }
    if action in actions:
        state_to_set, text = actions[action]
        await state.set_state(state_to_set)
        try:
            await bot.send_message(chat_id=callback.from_user.id, text=text)
            await callback.answer("–Ø –Ω–∞–ø–∏—Å–∞–≤ —Ç–æ–±—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        except Exception:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞! –°–ø–µ—Ä—à—É –ø–æ—á–Ω–∏ –∑—ñ –º–Ω–æ—é –¥—ñ–∞–ª–æ–≥ –≤ –û–ü.", show_alert=True)
    else:
        await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")


# üëà –û–ù–û–í–õ–ï–ù–û: –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è check_profile
@common_router.message(Command("check_profile"))
async def check_profile(message: Message, db: aiosqlite.Connection, bot: Bot):
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ!")
        return

    profile_data = None
    username_to_check = ""

    # –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ö–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é (reply)
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        username_to_check = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
        async with db.execute("SELECT name, age, bio, photo_id FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
            profile_data = await cursor.fetchone()

    # –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –ö–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /check_profile @username)
    else:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!</b>\n"
                                "–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü—é –∫–æ–º–∞–Ω–¥—É:\n"
                                "1. –£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (reply) –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
                                "2. –ù–∞–ø–∏—Å–∞–≤—à–∏ –π–æ–≥–æ @username: `/check_profile @username`",
                                parse_mode="HTML")
            return

        username_to_check = parts[1].lstrip('@')  # –í–∏–¥–∞–ª—è—î–º–æ @, —è–∫—â–æ –≤—ñ–Ω —î
        async with db.execute("SELECT name, age, bio, photo_id FROM profiles WHERE username = ?",
                              (username_to_check,)) as cursor:
            profile_data = await cursor.fetchone()

    # –°–ø—ñ–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç–∏
    if profile_data:
        name, age, bio, photo_id = profile_data
        caption = f"–ê–Ω–∫–µ—Ç–∞ <b>{username_to_check}</b>:\n<b>–Ü–º'—è:</b> {name}\n<b>–í—ñ–∫:</b> {age}\n<b>–ü—Ä–æ —Å–µ–±–µ:</b> {bio}"
        await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=caption, parse_mode="HTML")
    else:
        await message.reply(f"–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{username_to_check}</b> –ø–æ–∫–∏ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.", parse_mode="HTML")


@common_router.message(Command("delete_profile"))
async def delete_profile(message: Message, db: aiosqlite.Connection):
    user_id = message.from_user.id
    async with db.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        exists = await cursor.fetchone()
    if exists:
        await db.execute("DELETE FROM profiles WHERE user_id = ?", (user_id,))
        await db.commit()
        await message.reply("–¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    else:
        await message.reply("–£ —Ç–µ–±–µ —ñ —Ç–∞–∫ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")