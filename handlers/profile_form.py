# handlers/profile_form.py

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
import aiosqlite
import logging

form_router = Router()

class ProfileForm(StatesGroup):
    name = State()
    age = State()
    bio = State()
    photo = State()

@form_router.message(Command("create_profile"))
async def start_profile_creation(message: Message, state: FSMContext, db: aiosqlite.Connection, bot: Bot):
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ!")
        return
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    async with db.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        exists = await cursor.fetchone()
    if exists:
        await message.reply("–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–Ω–∫–µ—Ç–∞! –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª–∏ —Å—Ç–∞—Ä—É –∫–æ–º–∞–Ω–¥–æ—é /delete_profile")
        return
    await state.set_state(ProfileForm.name)
    try:
        await bot.send_message(chat_id=user_id, text="–ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        await message.reply(f"@{username}, —è –Ω–∞–ø–∏—Å–∞–≤ —Ç–æ–±—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–û–ü). –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ —Ç–∞–º.")
    except Exception as e:
        await message.reply(f"@{username}, —è –Ω–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ –≤ –û–ü. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω–∏ –∑—ñ –º–Ω–æ—é –¥—ñ–∞–ª–æ–≥ —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.")
        logging.error(f"–ù–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}", exc_info=True)
        await state.clear()

@form_router.message(ProfileForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ProfileForm.age)
    await message.reply("–í—ñ–¥–º—ñ–Ω–Ω–æ! –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

@form_router.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(age=int(message.text))
    await state.set_state(ProfileForm.bio)
    await message.reply("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä —Ä–æ–∑–∫–∞–∂–∏ —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ.")

@form_router.message(ProfileForm.bio)
async def process_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await state.set_state(ProfileForm.photo)
    await message.reply("–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–≤–æ—î —Ñ–æ—Ç–æ.")

@form_router.message(ProfileForm.photo, F.photo)
async def process_photo(message: Message, state: FSMContext, db: aiosqlite.Connection):
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_file_id)
    user_data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    await db.execute(
        "INSERT INTO profiles (user_id, username, name, age, bio, photo_id) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, username, user_data['name'], user_data['age'], user_data['bio'], user_data['photo_id'])
    )
    await db.commit()
    await state.clear()
    await message.reply("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞! üéâ")

@form_router.message(ProfileForm.photo)
async def process_photo_invalid(message: Message):
    await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.")