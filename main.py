import asyncio
import logging
import aiosqlite
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.strategy import FSMStrategy
from aiogram.types import Message, BotCommand  # üëà 1. –Ü–ú–ü–û–†–¢–£–Ñ–ú–û BotCommand

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
load_dotenv()
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv('BOT_TOKEN')
DB_NAME = 'profiles.db'

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è —Ç–æ–∫–µ–Ω
if not BOT_TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
    exit()

# --- –°—Ç–≤–æ—Ä—é—î–º–æ –ì–û–õ–û–í–ù–Ü –æ–±'—î–∫—Ç–∏ ---
dp = Dispatcher(fsm_strategy=FSMStrategy.GLOBAL_USER)
form_router = Router()


# --- FSM (–ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω—ñ–≤) ---
class ProfileForm(StatesGroup):
    name = State()
    age = State()
    bio = State()


# üëà 2. –°–¢–í–û–†–Æ–Ñ–ú–û –§–£–ù–ö–¶–Ü–Æ –î–õ–Ø –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø –ö–û–ú–ê–ù–î
async def set_bot_commands(bot: Bot):
    """
    –°—Ç–≤–æ—Ä—é—î –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É Telegram.
    """
    commands = [
        BotCommand(command="start", description="üèÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="create_profile", description="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="my_profile", description="üë§ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="check_profile", description="üëÄ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É —ñ–Ω—à–æ–≥–æ (—á–µ—Ä–µ–∑ reply)"),
        BotCommand(command="delete_profile", description="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É")
    ]
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    await bot.set_my_commands(commands)


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î ---
async def init_db():
    db = await aiosqlite.connect(DB_NAME)
    await db.execute('''
                     CREATE TABLE IF NOT EXISTS profiles
                     (
                         user_id
                         INTEGER
                         PRIMARY
                         KEY,
                         username
                         TEXT,
                         name
                         TEXT,
                         age
                         INTEGER,
                         bio
                         TEXT
                     )
                     ''')
    await db.commit()
    return db


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —â–æ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ form_router ---
# ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∫–µ—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç –ë–ï–ó –ó–ú–Ü–ù) ...
@form_router.message(Command("create_profile"))
async def start_profile_creation(message: Message, state: FSMContext, db: aiosqlite.Connection, bot: Bot):
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ!")
        return
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    async with db.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        exists = await cursor.fetchone()
    if exists:
        await message.reply("–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–Ω–∫–µ—Ç–∞! –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª–∏ —Å—Ç–∞—Ä—É –∫–æ–º–∞–Ω–¥–æ—é /delete_profile")
        return
    await state.set_state(ProfileForm.name)
    try:
        await bot.send_message(chat_id=user_id, text="–ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        await message.reply(
            f"@{username}, —è –Ω–∞–ø–∏—Å–∞–≤ —Ç–æ–±—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–û–ü). –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ —Ç–∞–º.")
    except Exception as e:
        await message.reply(
            f"@{username}, —è –Ω–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ –≤ –û–ü. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω–∏ –∑—ñ –º–Ω–æ—é –¥—ñ–∞–ª–æ–≥ (–Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –º–æ—î —ñ–º'—è —Ç–∞ 'Start') —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.")
        logging.error(f"–ù–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}", exc_info=True)
        await state.clear()


@form_router.message(ProfileForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ProfileForm.age)
    await message.reply("–í—ñ–¥–º—ñ–Ω–Ω–æ! –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")


@form_router.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(age=int(message.text))
    await state.set_state(ProfileForm.bio)
    await message.reply("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä —Ä–æ–∑–∫–∞–∂–∏ —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ.")


@form_router.message(ProfileForm.bio)
async def process_bio(message: Message, state: FSMContext, db: aiosqlite.Connection):
    await state.update_data(bio=message.text)
    user_data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    await db.execute("INSERT INTO profiles (user_id, username, name, age, bio) VALUES (?, ?, ?, ?, ?)",
                     (user_id, username, user_data['name'], user_data['age'], user_data['bio']))
    await db.commit()
    await state.clear()
    await message.reply("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö! üéâ", parse_mode="HTML")


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —â–æ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ 'dp' ---
# ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç –ë–ï–ó –ó–ú–Ü–ù) ...
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∫–µ—Ç. –î–æ–¥–∞–π –º–µ–Ω–µ –≤ –≥—Ä—É–ø—É —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /create_profile")


@dp.message(Command("my_profile"))
async def show_my_profile(message: Message, db: aiosqlite.Connection):
    user_id = message.from_user.id
    async with db.execute("SELECT name, age, bio FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        profile_data = await cursor.fetchone()
    if profile_data:
        name, age, bio = profile_data
        await message.reply(f"–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n<b>–Ü–º'—è:</b> {name}\n<b>–í—ñ–∫:</b> {age}\n<b>–ü—Ä–æ —Å–µ–±–µ:</b> {bio}",
                            parse_mode="HTML")
    else:
        await message.reply("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏. –°—Ç–≤–æ—Ä–∏ —ó—ó –∫–æ–º–∞–Ω–¥–æ—é /create_profile (—É –≥—Ä—É–ø—ñ).")


@dp.message(Command("check_profile"))
async def check_profile(message: Message, db: aiosqlite.Connection):
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ!")
        return
    if not message.reply_to_message:
        await message.reply(
            "–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü—é –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (reply) –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    user_id = message.reply_to_message.from_user.id
    username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
    async with db.execute("SELECT name, age, bio FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        profile_data = await cursor.fetchone()
    if profile_data:
        name, age, bio = profile_data
        await message.reply(f"–ê–Ω–∫–µ—Ç–∞ @{username}:\n<b>–Ü–º'—è:</b> {name}\n<b>–í—ñ–∫:</b> {age}\n<b>–ü—Ä–æ —Å–µ–±–µ:</b> {bio}",
                            parse_mode="HTML")
    else:
        await message.reply(f"–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –ø–æ–∫–∏ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")


@dp.message(Command("delete_profile"))
async def delete_profile(message: Message, db: aiosqlite.Connection):
    user_id = message.from_user.id
    async with db.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        exists = await cursor.fetchone()
    if exists:
        await db.execute("DELETE FROM profiles WHERE user_id = ?", (user_id,))
        await db.commit()
        await message.reply("–¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    else:
        await message.reply("–£ —Ç–µ–±–µ —ñ —Ç–∞–∫ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")


# --- –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---
async def main():
    bot = Bot(token=BOT_TOKEN)
    db = await init_db()

    dp.include_router(form_router)

    # üëà 3. –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –§–£–ù–ö–¶–Ü–Æ –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ë–û–¢–ê
    await set_bot_commands(bot)

    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, db=db)
    finally:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
        await db.close()
        logging.info("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ.")


if __name__ == '__main__':
    asyncio.run(main())