import asyncio
import logging
import aiosqlite
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types, F  # üëà –ù–û–í–ï: —ñ–º–ø–æ—Ä—Ç—É—î–º–æ F –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.strategy import FSMStrategy
from aiogram.types import Message, BotCommand

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
load_dotenv()
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv('BOT_TOKEN')
DB_NAME = 'profiles.db'

if not BOT_TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
    exit()

# --- –°—Ç–≤–æ—Ä—é—î–º–æ –ì–û–õ–û–í–ù–Ü –æ–±'—î–∫—Ç–∏ ---
dp = Dispatcher(fsm_strategy=FSMStrategy.GLOBAL_USER)
form_router = Router()


# --- FSM (–ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω—ñ–≤) ---
class ProfileForm(StatesGroup):
    name = State()
    age = State()
    bio = State()
    photo = State()  # üëà –ù–û–í–ï: –¥–æ–¥–∞–ª–∏ —Å—Ç–∞–Ω –¥–ª—è —Ñ–æ—Ç–æ


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ ---
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üèÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="create_profile", description="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="my_profile", description="üë§ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="check_profile", description="üëÄ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É —ñ–Ω—à–æ–≥–æ (—á–µ—Ä–µ–∑ reply)"),
        BotCommand(command="delete_profile", description="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É")
    ]
    await bot.set_my_commands(commands)


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î ---
async def init_db():
    db = await aiosqlite.connect(DB_NAME)
    await db.execute('''
                     CREATE TABLE IF NOT EXISTS profiles
                     (
                         user_id
                         INTEGER
                         PRIMARY
                         KEY,
                         username
                         TEXT,
                         name
                         TEXT,
                         age
                         INTEGER,
                         bio
                         TEXT,
                         photo_id
                         TEXT
                     )
                     ''')  # üëà –ù–û–í–ï: –¥–æ–¥–∞–ª–∏ –∫–æ–ª–æ–Ω–∫—É photo_id
    await db.commit()
    return db


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∫–µ—Ç ---

@form_router.message(Command("create_profile"))
async def start_profile_creation(message: Message, state: FSMContext, db: aiosqlite.Connection, bot: Bot):
    # ... (—Ü–µ–π –∫–æ–¥ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è)
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ!")
        return
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    async with db.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        exists = await cursor.fetchone()
    if exists:
        await message.reply("–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–Ω–∫–µ—Ç–∞! –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª–∏ —Å—Ç–∞—Ä—É –∫–æ–º–∞–Ω–¥–æ—é /delete_profile")
        return
    await state.set_state(ProfileForm.name)
    try:
        await bot.send_message(chat_id=user_id, text="–ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        await message.reply(
            f"@{username}, —è –Ω–∞–ø–∏—Å–∞–≤ —Ç–æ–±—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–û–ü). –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ —Ç–∞–º.")
    except Exception as e:
        await message.reply(
            f"@{username}, —è –Ω–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ –≤ –û–ü. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω–∏ –∑—ñ –º–Ω–æ—é –¥—ñ–∞–ª–æ–≥ —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.")
        logging.error(f"–ù–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}", exc_info=True)
        await state.clear()


@form_router.message(ProfileForm.name)
async def process_name(message: Message, state: FSMContext):
    # ... (—Ü–µ–π –∫–æ–¥ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è)
    await state.update_data(name=message.text)
    await state.set_state(ProfileForm.age)
    await message.reply("–í—ñ–¥–º—ñ–Ω–Ω–æ! –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")


@form_router.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    # ... (—Ü–µ–π –∫–æ–¥ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è)
    if not message.text.isdigit():
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(age=int(message.text))
    await state.set_state(ProfileForm.bio)
    await message.reply("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä —Ä–æ–∑–∫–∞–∂–∏ —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ.")


@form_router.message(ProfileForm.bio)
async def process_bio(message: Message, state: FSMContext):
    # üëà –ó–ú–Ü–ù–ï–ù–û: —Ç–µ–ø–µ—Ä —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫
    await state.update_data(bio=message.text)
    await state.set_state(ProfileForm.photo)
    await message.reply("–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–≤–æ—î —Ñ–æ—Ç–æ.")


# üëà –ù–û–í–ï: –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
@form_router.message(ProfileForm.photo, F.photo)
async def process_photo(message: Message, state: FSMContext, db: aiosqlite.Connection):
    # F.photo - —Ü–µ "–º–∞–≥—ñ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä", —è–∫–∏–π –ª–æ–≤–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ

    # –ë–µ—Ä–µ–º–æ file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –Ω–∞–π–∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ (–æ—Å—Ç–∞–Ω–Ω—å–æ—ó —É —Å–ø–∏—Å–∫—É)
    photo_file_id = message.photo[-1].file_id

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ FSM
    await state.update_data(photo_id=photo_file_id)
    user_data = await state.get_data()

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å–µ –≤ –ë–î
    await db.execute(
        "INSERT INTO profiles (user_id, username, name, age, bio, photo_id) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, username, user_data['name'], user_data['age'], user_data['bio'], user_data['photo_id'])
    )
    await db.commit()

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è
    await state.clear()

    await message.reply("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞! üéâ")


@form_router.message(ProfileForm.photo)
async def process_photo_invalid(message: Message):
    # –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ, –∞ —Ç–µ–∫—Å—Ç
    await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.")


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∫–µ—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /create_profile, —â–æ–± –ø–æ—á–∞—Ç–∏.")


# üëà –ó–ú–Ü–ù–ï–ù–û: —Ç–µ–ø–µ—Ä –ø–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–æ—Ç–æ
@dp.message(Command("my_profile"))
async def show_my_profile(message: Message, db: aiosqlite.Connection, bot: Bot):
    user_id = message.from_user.id
    async with db.execute("SELECT name, age, bio, photo_id FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        profile_data = await cursor.fetchone()

    if profile_data:
        name, age, bio, photo_id = profile_data
        caption = f"<b>–Ü–º'—è:</b> {name}\n<b>–í—ñ–∫:</b> {age}\n<b>–ü—Ä–æ —Å–µ–±–µ:</b> {bio}"
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bot.send_photo –∑–∞–º—ñ—Å—Ç—å message.reply
        await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=caption, parse_mode="HTML")
    else:
        await message.reply("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏. –°—Ç–≤–æ—Ä–∏ —ó—ó –∫–æ–º–∞–Ω–¥–æ—é /create_profile (—É –≥—Ä—É–ø—ñ).")


# üëà –ó–ú–Ü–ù–ï–ù–û: —Ç–µ–ø–µ—Ä –ø–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–æ—Ç–æ
@dp.message(Command("check_profile"))
async def check_profile(message: Message, db: aiosqlite.Connection, bot: Bot):
    if message.chat.type not in ('group', 'supergroup'):
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ!")
        return
    if not message.reply_to_message:
        await message.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü—é –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    user_id = message.reply_to_message.from_user.id
    username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name

    async with db.execute("SELECT name, age, bio, photo_id FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        profile_data = await cursor.fetchone()

    if profile_data:
        name, age, bio, photo_id = profile_data
        caption = f"–ê–Ω–∫–µ—Ç–∞ @{username}:\n<b>–Ü–º'—è:</b> {name}\n<b>–í—ñ–∫:</b> {age}\n<b>–ü—Ä–æ —Å–µ–±–µ:</b> {bio}"
        await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=caption, parse_mode="HTML")
    else:
        await message.reply(f"–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –ø–æ–∫–∏ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")


@dp.message(Command("delete_profile"))
async def delete_profile(message: Message, db: aiosqlite.Connection):
    # ... (—Ü–µ–π –∫–æ–¥ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è)
    user_id = message.from_user.id
    async with db.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,)) as cursor:
        exists = await cursor.fetchone()
    if exists:
        await db.execute("DELETE FROM profiles WHERE user_id = ?", (user_id,))
        await db.commit()
        await message.reply("–¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    else:
        await message.reply("–£ —Ç–µ–±–µ —ñ —Ç–∞–∫ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")


# --- –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---
async def main():
    bot = Bot(token=BOT_TOKEN)
    db = await init_db()

    dp.include_router(form_router)

    await set_bot_commands(bot)

    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, db=db)
    finally:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
        await db.close()
        logging.info("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ.")


if __name__ == '__main__':
    asyncio.run(main())